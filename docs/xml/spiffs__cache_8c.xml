<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="spiffs__cache_8c" kind="file" language="C++">
    <compoundname>spiffs_cache.c</compoundname>
    <includes refid="spiffs_8h" local="yes">spiffs.h</includes>
    <includes refid="spiffs__nucleus_8h" local="yes">spiffs_nucleus.h</includes>
    <incdepgraph>
      <node id="29">
        <label>src/spiffs_cache.c</label>
        <link refid="spiffs__cache_8c"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>spiffs.h</label>
        <link refid="spiffs_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>spiffs_nucleus.h</label>
        <link refid="spiffs__nucleus_8h_source"/>
      </node>
      <node id="31">
        <label>spiffs_config.h</label>
        <link refid="spiffs__config_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>stdlib.h</label>
      </node>
      <node id="35">
        <label>stddef.h</label>
      </node>
      <node id="34">
        <label>string.h</label>
      </node>
      <node id="36">
        <label>unistd.h</label>
      </node>
      <node id="32">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="spiffs__cache_8c_1a2c814a31fa0d864371669e030f24b62b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>spiffs_cache_page *</type>
        <definition>static spiffs_cache_page* spiffs_cache_page_get</definition>
        <argsstring>(spiffs *fs, spiffs_page_ix pix)</argsstring>
        <name>spiffs_cache_page_get</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>spiffs_page_ix</type>
          <declname>pix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="14" column="1" bodyfile="src/spiffs_cache.c" bodystart="14" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1a4335ff41a56f3ccdf4f1ab0c673227dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>s32_t</type>
        <definition>static s32_t spiffs_cache_page_free</definition>
        <argsstring>(spiffs *fs, int ix, u8_t write_back)</argsstring>
        <name>spiffs_cache_page_free</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>u8_t</type>
          <declname>write_back</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="33" column="1" bodyfile="src/spiffs_cache.c" bodystart="33" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1ac43cf40a20cfbd054526fd9f43fa4861" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>s32_t</type>
        <definition>static s32_t spiffs_cache_page_remove_oldest</definition>
        <argsstring>(spiffs *fs, u8_t flag_mask, u8_t flags)</argsstring>
        <name>spiffs_cache_page_remove_oldest</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>u8_t</type>
          <declname>flag_mask</declname>
        </param>
        <param>
          <type>u8_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="62" column="1" bodyfile="src/spiffs_cache.c" bodystart="62" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1ab8166224d9c3e017cb2afc7b218f91ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>spiffs_cache_page *</type>
        <definition>static spiffs_cache_page* spiffs_cache_page_allocate</definition>
        <argsstring>(spiffs *fs)</argsstring>
        <name>spiffs_cache_page_allocate</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="92" column="1" bodyfile="src/spiffs_cache.c" bodystart="92" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1ac02e23a76c9c7cc18c111af3a42be001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spiffs_cache_drop_page</definition>
        <argsstring>(spiffs *fs, spiffs_page_ix pix)</argsstring>
        <name>spiffs_cache_drop_page</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>spiffs_page_ix</type>
          <declname>pix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="113" column="1" bodyfile="src/spiffs_cache.c" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1adb05bf3fc56800869044b61912d49aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>s32_t</type>
        <definition>s32_t spiffs_phys_rd</definition>
        <argsstring>(spiffs *fs, u8_t op, spiffs_file fh, u32_t addr, u32_t len, u8_t *dst)</argsstring>
        <name>spiffs_phys_rd</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>u8_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>spiffs_file</type>
          <declname>fh</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>u8_t *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="123" column="1" bodyfile="src/spiffs_cache.c" bodystart="123" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1a33fa796cebf078c179dc96d5d4d16826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>s32_t</type>
        <definition>s32_t spiffs_phys_wr</definition>
        <argsstring>(spiffs *fs, u8_t op, spiffs_file fh, u32_t addr, u32_t len, u8_t *src)</argsstring>
        <name>spiffs_phys_wr</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>u8_t</type>
          <declname>op</declname>
        </param>
        <param>
          <type>spiffs_file</type>
          <declname>fh</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>u32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>u8_t *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="184" column="1" bodyfile="src/spiffs_cache.c" bodystart="184" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1adae548c1ee3d7cb97937b6c9c8e7f1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>spiffs_cache_page *</type>
        <definition>spiffs_cache_page* spiffs_cache_page_get_by_fd</definition>
        <argsstring>(spiffs *fs, spiffs_fd *fd)</argsstring>
        <name>spiffs_cache_page_get_by_fd</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type><ref refid="structspiffs__fd" kindref="compound">spiffs_fd</ref> *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="227" column="1" bodyfile="src/spiffs_cache.c" bodystart="227" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1a24cc89b4ad59ef992508383263b774b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>spiffs_cache_page *</type>
        <definition>spiffs_cache_page* spiffs_cache_page_allocate_by_fd</definition>
        <argsstring>(spiffs *fs, spiffs_fd *fd)</argsstring>
        <name>spiffs_cache_page_allocate_by_fd</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type><ref refid="structspiffs__fd" kindref="compound">spiffs_fd</ref> *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="250" column="1" bodyfile="src/spiffs_cache.c" bodystart="250" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1a72db226d9d669355899bf11b9f1bf54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spiffs_cache_fd_release</definition>
        <argsstring>(spiffs *fs, spiffs_cache_page *cp)</argsstring>
        <name>spiffs_cache_fd_release</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>spiffs_cache_page *</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="268" column="1" bodyfile="src/spiffs_cache.c" bodystart="268" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="spiffs__cache_8c_1a600305dac185dc6968c2096220bc2f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spiffs_cache_init</definition>
        <argsstring>(spiffs *fs)</argsstring>
        <name>spiffs_cache_init</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs</ref> *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/spiffs_cache.c" line="286" column="1" bodyfile="src/spiffs_cache.c" bodystart="286" bodyend="317"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>spiffs_cache.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Jun<sp/>23,<sp/>2013</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>petera</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spiffs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spiffs_nucleus.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPIFFS_CACHE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>cached<sp/>page<sp/>for<sp/>give<sp/>page<sp/>index,<sp/>or<sp/>null<sp/>if<sp/>no<sp/>such<sp/>cached<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>spiffs_cache_page<sp/>*spiffs_cache_page_get(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,<sp/>spiffs_page_ix<sp/>pix)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>*cache<sp/>=<sp/>spiffs_get_cache(fs);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cache-&gt;cpage_use_map<sp/>&amp;<sp/>cache-&gt;cpage_use_mask)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cache-&gt;cpage_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/>spiffs_get_cache_page_hdr(fs,<sp/>cache,<sp/>i);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cache-&gt;cpage_use_map<sp/>&amp;<sp/>(1&lt;&lt;i))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cp-&gt;flags<sp/>&amp;<sp/>SPIFFS_CACHE_FLAG_TYPE_WR)<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp-&gt;pix<sp/>==<sp/>pix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SPIFFS_CACHE_DBG(&quot;CACHE_GET:<sp/>have<sp/>cache<sp/>page<sp/>&quot;_SPIPRIi&quot;<sp/>for<sp/>&quot;_SPIPRIpg&quot;\n&quot;,<sp/>i,<sp/>pix);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp-&gt;last_access<sp/>=<sp/>cache-&gt;last_access;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//SPIFFS_CACHE_DBG(&quot;CACHE_GET:<sp/>no<sp/>cache<sp/>for<sp/>&quot;_SPIPRIpg&quot;\n&quot;,<sp/>pix);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>frees<sp/>cached<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>s32_t<sp/>spiffs_cache_page_free(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>u8_t<sp/>write_back)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>s32_t<sp/>res<sp/>=<sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>*cache<sp/>=<sp/>spiffs_get_cache(fs);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/>spiffs_get_cache_page_hdr(fs,<sp/>cache,<sp/>ix);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache-&gt;cpage_use_map<sp/>&amp;<sp/>(1&lt;&lt;ix))<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_back<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cp-&gt;flags<sp/>&amp;<sp/>SPIFFS_CACHE_FLAG_TYPE_WR)<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cp-&gt;flags<sp/>&amp;<sp/>SPIFFS_CACHE_FLAG_DIRTY))<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8_t<sp/>*mem<sp/>=<sp/><sp/>spiffs_get_cache_page(fs,<sp/>cache,<sp/>ix);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SPIFFS_CACHE_DBG(</highlight><highlight class="stringliteral">&quot;CACHE_FREE:<sp/>write<sp/>cache<sp/>page<sp/>&quot;</highlight><highlight class="normal">_SPIPRIi</highlight><highlight class="stringliteral">&quot;<sp/>pix<sp/>&quot;</highlight><highlight class="normal">_SPIPRIpg</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>ix,<sp/>cp-&gt;pix);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>SPIFFS_HAL_WRITE(fs,<sp/>SPIFFS_PAGE_TO_PADDR(fs,<sp/>cp-&gt;pix),<sp/>SPIFFS_CFG_LOG_PAGE_SZ(fs),<sp/>mem);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPIFFS_CACHE_WR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp-&gt;flags<sp/>&amp;<sp/>SPIFFS_CACHE_FLAG_TYPE_WR)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SPIFFS_CACHE_DBG(</highlight><highlight class="stringliteral">&quot;CACHE_FREE:<sp/>free<sp/>cache<sp/>page<sp/>&quot;</highlight><highlight class="normal">_SPIPRIi</highlight><highlight class="stringliteral">&quot;<sp/>objid<sp/>&quot;</highlight><highlight class="normal">_SPIPRIid</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>ix,<sp/>cp-&gt;obj_id);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SPIFFS_CACHE_DBG(</highlight><highlight class="stringliteral">&quot;CACHE_FREE:<sp/>free<sp/>cache<sp/>page<sp/>&quot;</highlight><highlight class="normal">_SPIPRIi</highlight><highlight class="stringliteral">&quot;<sp/>pix<sp/>&quot;</highlight><highlight class="normal">_SPIPRIpg</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>ix,<sp/>cp-&gt;pix);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;cpage_use_map<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>ix);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>cp-&gt;flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>removes<sp/>the<sp/>oldest<sp/>accessed<sp/>cached<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>s32_t<sp/>spiffs_cache_page_remove_oldest(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,<sp/>u8_t<sp/>flag_mask,<sp/>u8_t<sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>s32_t<sp/>res<sp/>=<sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>*cache<sp/>=<sp/>spiffs_get_cache(fs);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cache-&gt;cpage_use_map<sp/>&amp;<sp/>cache-&gt;cpage_use_mask)<sp/>!=<sp/>cache-&gt;cpage_use_mask)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>least<sp/>one<sp/>free<sp/>cpage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>busy,<sp/>scan<sp/>thru<sp/>all<sp/>to<sp/>find<sp/>the<sp/>cpage<sp/>which<sp/>has<sp/>oldest<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cand_ix<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>u32_t<sp/>oldest_val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cache-&gt;cpage_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/>spiffs_get_cache_page_hdr(fs,<sp/>cache,<sp/>i);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cache-&gt;last_access<sp/>-<sp/>cp-&gt;last_access)<sp/>&gt;<sp/>oldest_val<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cp-&gt;flags<sp/>&amp;<sp/>flag_mask)<sp/>==<sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldest_val<sp/>=<sp/>cache-&gt;last_access<sp/>-<sp/>cp-&gt;last_access;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cand_ix<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cand_ix<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>spiffs_cache_page_free(fs,<sp/>cand_ix,<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allocates<sp/>a<sp/>new<sp/>cached<sp/>page<sp/>and<sp/>returns<sp/>it,<sp/>or<sp/>null<sp/>if<sp/>all<sp/>cache<sp/>pages<sp/>are<sp/>busy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>spiffs_cache_page<sp/>*spiffs_cache_page_allocate(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>*cache<sp/>=<sp/>spiffs_get_cache(fs);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache-&gt;cpage_use_map<sp/>==<sp/>0xffffffff)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>of<sp/>cache<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cache-&gt;cpage_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cache-&gt;cpage_use_map<sp/>&amp;<sp/>(1&lt;&lt;i))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/>spiffs_get_cache_page_hdr(fs,<sp/>cache,<sp/>i);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache-&gt;cpage_use_map<sp/>|=<sp/>(1&lt;&lt;i);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp-&gt;last_access<sp/>=<sp/>cache-&gt;last_access;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SPIFFS_CACHE_DBG(&quot;CACHE_ALLO:<sp/>allocated<sp/>cache<sp/>page<sp/>&quot;_SPIPRIi&quot;\n&quot;,<sp/>i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>of<sp/>cache<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>drops<sp/>the<sp/>cache<sp/>page<sp/>for<sp/>give<sp/>page<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spiffs_cache_drop_page(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,<sp/>spiffs_page_ix<sp/>pix)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/><sp/>spiffs_cache_page_get(fs,<sp/>pix);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>spiffs_cache_page_free(fs,<sp/>cp-&gt;ix,<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reads<sp/>from<sp/>spi<sp/>flash<sp/>or<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">s32_t<sp/>spiffs_phys_rd(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>u8_t<sp/>op,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>spiffs_file<sp/>fh,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>addr,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>len,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>u8_t<sp/>*dst)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>(void)fh;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>s32_t<sp/>res<sp/>=<sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>*cache<sp/>=<sp/>spiffs_get_cache(fs);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/><sp/>spiffs_cache_page_get(fs,<sp/>SPIFFS_PADDR_TO_PAGE(fs,<sp/>addr));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>cache-&gt;last_access++;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ve<sp/>already<sp/>got<sp/>one,<sp/>you<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPIFFS_CACHE_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>fs-&gt;cache_hits++;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>cp-&gt;last_access<sp/>=<sp/>cache-&gt;last_access;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>u8_t<sp/>*mem<sp/>=<sp/><sp/>spiffs_get_cache_page(fs,<sp/>cache,<sp/>cp-&gt;ix);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>_SPIFFS_MEMCPY(dst,<sp/>&amp;mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs,<sp/>addr)],<sp/>len);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((op<sp/>&amp;<sp/>SPIFFS_OP_TYPE_MASK)<sp/>==<sp/>SPIFFS_OP_T_OBJ_LU2)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>second<sp/>layer<sp/>lookup<sp/>functions,<sp/>we<sp/>do<sp/>not<sp/>cache<sp/>in<sp/>order<sp/>to<sp/>prevent<sp/>shredding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_HAL_READ(fs,<sp/>addr,<sp/>len,<sp/>dst);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPIFFS_CACHE_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>fs-&gt;cache_misses++;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>operation<sp/>will<sp/>always<sp/>free<sp/>one<sp/>cache<sp/>page<sp/>(unless<sp/>all<sp/>already<sp/>free),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>result<sp/>code<sp/>stems<sp/>from<sp/>the<sp/>write<sp/>operation<sp/>of<sp/>the<sp/>possibly<sp/>freed<sp/>cache<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>spiffs_cache_page_remove_oldest(fs,<sp/>SPIFFS_CACHE_FLAG_TYPE_WR,<sp/>0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>spiffs_cache_page_allocate(fs);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp-&gt;flags<sp/>=<sp/>SPIFFS_CACHE_FLAG_WRTHRU;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp-&gt;pix<sp/>=<sp/>SPIFFS_PADDR_TO_PAGE(fs,<sp/>addr);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SPIFFS_CACHE_DBG(</highlight><highlight class="stringliteral">&quot;CACHE_ALLO:<sp/>allocated<sp/>cache<sp/>page<sp/>&quot;</highlight><highlight class="normal">_SPIPRIi</highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>pix<sp/>&quot;</highlight><highlight class="normal">_SPIPRIpg<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>cp-&gt;ix,<sp/>cp-&gt;pix);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s32_t<sp/>res2<sp/>=<sp/>SPIFFS_HAL_READ(fs,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr<sp/>-<sp/>SPIFFS_PADDR_TO_PAGE_OFFSET(fs,<sp/>addr),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIFFS_CFG_LOG_PAGE_SZ(fs),</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spiffs_get_cache_page(fs,<sp/>cache,<sp/>cp-&gt;ix));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res2<sp/>!=<sp/>SPIFFS_OK)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>honor<sp/>read<sp/>failure<sp/>before<sp/>possible<sp/>write<sp/>failure<sp/>(bad<sp/>idea?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>res2;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u8_t<sp/>*mem<sp/>=<sp/><sp/>spiffs_get_cache_page(fs,<sp/>cache,<sp/>cp-&gt;ix);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_SPIFFS_MEMCPY(dst,<sp/>&amp;mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs,<sp/>addr)],<sp/>len);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>never<sp/>happen,<sp/>last<sp/>resort<sp/>for<sp/>sake<sp/>of<sp/>symmetry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s32_t<sp/>res2<sp/>=<sp/>SPIFFS_HAL_READ(fs,<sp/>addr,<sp/>len,<sp/>dst);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res2<sp/>!=<sp/>SPIFFS_OK)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>honor<sp/>read<sp/>failure<sp/>before<sp/>possible<sp/>write<sp/>failure<sp/>(bad<sp/>idea?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>res2;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>writes<sp/>to<sp/>spi<sp/>flash<sp/>and/or<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">s32_t<sp/>spiffs_phys_wr(</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>u8_t<sp/>op,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>spiffs_file<sp/>fh,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>addr,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>u32_t<sp/>len,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>u8_t<sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>(void)fh;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>spiffs_page_ix<sp/>pix<sp/>=<sp/>SPIFFS_PADDR_TO_PAGE(fs,<sp/>addr);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>*cache<sp/>=<sp/>spiffs_get_cache(fs);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/><sp/>spiffs_cache_page_get(fs,<sp/>pix);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&amp;&amp;<sp/>(op<sp/>&amp;<sp/>SPIFFS_OP_COM_MASK)<sp/>!=<sp/>SPIFFS_OP_C_WRTHRU)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>a<sp/>cache<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>in<sp/>data<sp/>to<sp/>cache<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((op<sp/>&amp;<sp/>SPIFFS_OP_COM_MASK)<sp/>==<sp/>SPIFFS_OP_C_DELE<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(op<sp/>&amp;<sp/>SPIFFS_OP_TYPE_MASK)<sp/>!=<sp/>SPIFFS_OP_T_OBJ_LU)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>is<sp/>being<sp/>deleted,<sp/>wipe<sp/>from<sp/>cache<sp/>-<sp/>unless<sp/>it<sp/>is<sp/>a<sp/>lookup<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spiffs_cache_page_free(fs,<sp/>cp-&gt;ix,<sp/>0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_HAL_WRITE(fs,<sp/>addr,<sp/>len,<sp/>src);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>u8_t<sp/>*mem<sp/>=<sp/><sp/>spiffs_get_cache_page(fs,<sp/>cache,<sp/>cp-&gt;ix);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>_SPIFFS_MEMCPY(&amp;mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs,<sp/>addr)],<sp/>src,<sp/>len);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>cache-&gt;last_access++;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>cp-&gt;last_access<sp/>=<sp/>cache-&gt;last_access;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp-&gt;flags<sp/>&amp;<sp/>SPIFFS_CACHE_FLAG_WRTHRU)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>is<sp/>being<sp/>updated,<sp/>no<sp/>write-cache,<sp/>just<sp/>pass<sp/>thru</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_HAL_WRITE(fs,<sp/>addr,<sp/>len,<sp/>src);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>cache<sp/>page,<sp/>no<sp/>write<sp/>cache<sp/>-<sp/>just<sp/>write<sp/>thru</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_HAL_WRITE(fs,<sp/>addr,<sp/>len,<sp/>src);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SPIFFS_CACHE_WR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>cache<sp/>page<sp/>that<sp/>this<sp/>fd<sp/>refers,<sp/>or<sp/>null<sp/>if<sp/>no<sp/>cache<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">spiffs_cache_page<sp/>*spiffs_cache_page_get_by_fd(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,<sp/><ref refid="structspiffs__fd" kindref="compound">spiffs_fd</ref><sp/>*fd)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>*cache<sp/>=<sp/>spiffs_get_cache(fs);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cache-&gt;cpage_use_map<sp/>&amp;<sp/>cache-&gt;cpage_use_mask)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>cpages<sp/>free,<sp/>no<sp/>cpage<sp/>cannot<sp/>be<sp/>assigned<sp/>to<sp/>obj_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cache-&gt;cpage_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/>spiffs_get_cache_page_hdr(fs,<sp/>cache,<sp/>i);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cache-&gt;cpage_use_map<sp/>&amp;<sp/>(1&lt;&lt;i))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cp-&gt;flags<sp/>&amp;<sp/>SPIFFS_CACHE_FLAG_TYPE_WR)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp-&gt;obj_id<sp/>==<sp/>fd-&gt;obj_id)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allocates<sp/>a<sp/>new<sp/>cache<sp/>page<sp/>and<sp/>refers<sp/>this<sp/>to<sp/>given<sp/>fd<sp/>-<sp/>flushes<sp/>an<sp/>old<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>page<sp/>if<sp/>all<sp/>cache<sp/>is<sp/>busy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">spiffs_cache_page<sp/>*spiffs_cache_page_allocate_by_fd(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,<sp/><ref refid="structspiffs__fd" kindref="compound">spiffs_fd</ref><sp/>*fd)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>this<sp/>function<sp/>is<sp/>called,<sp/>it<sp/>is<sp/>ensured<sp/>that<sp/>there<sp/>is<sp/>no<sp/>already<sp/>existing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>page<sp/>with<sp/>same<sp/>object<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>spiffs_cache_page_remove_oldest(fs,<sp/>SPIFFS_CACHE_FLAG_TYPE_WR,<sp/>0);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>spiffs_cache_page<sp/>*cp<sp/>=<sp/>spiffs_cache_page_allocate(fs);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>not<sp/>get<sp/>cache<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>cp-&gt;flags<sp/>=<sp/>SPIFFS_CACHE_FLAG_TYPE_WR;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>cp-&gt;obj_id<sp/>=<sp/>fd-&gt;obj_id;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>fd-&gt;cache_page<sp/>=<sp/>cp;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>SPIFFS_CACHE_DBG(</highlight><highlight class="stringliteral">&quot;CACHE_ALLO:<sp/>allocated<sp/>cache<sp/>page<sp/>&quot;</highlight><highlight class="normal">_SPIPRIi</highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>fd<sp/>&quot;</highlight><highlight class="normal">_SPIPRIfd<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">_SPIPRIid<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>cp-&gt;ix,<sp/>fd-&gt;file_nbr,<sp/>fd-&gt;obj_id);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unrefers<sp/>all<sp/>fds<sp/>that<sp/>this<sp/>cache<sp/>page<sp/>refers<sp/>to<sp/>and<sp/>releases<sp/>the<sp/>cache<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spiffs_cache_fd_release(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs,<sp/>spiffs_cache_page<sp/>*cp)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>u32_t<sp/>i;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="structspiffs__fd" kindref="compound">spiffs_fd</ref><sp/>*fds<sp/>=<sp/>(<ref refid="structspiffs__fd" kindref="compound">spiffs_fd</ref><sp/>*)fs-&gt;fd_space;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fs-&gt;fd_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspiffs__fd" kindref="compound">spiffs_fd</ref><sp/>*cur_fd<sp/>=<sp/>&amp;fds[i];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_fd-&gt;file_nbr<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>cur_fd-&gt;cache_page<sp/>==<sp/>cp)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_fd-&gt;cache_page<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>spiffs_cache_page_free(fs,<sp/>cp-&gt;ix,<sp/>0);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>cp-&gt;obj_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initializes<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spiffs_cache_init(<ref refid="structspiffs__t" kindref="compound">spiffs</ref><sp/>*fs)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fs-&gt;cache<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>u32_t<sp/>sz<sp/>=<sp/>fs-&gt;cache_size;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>u32_t<sp/>cache_mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cache_entries<sp/>=</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(sz<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(spiffs_cache))<sp/>/<sp/>(SPIFFS_CACHE_PAGE_SIZE(fs));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache_entries<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cache_entries;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>cache_mask<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>cache_mask<sp/>|=<sp/>1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>cache;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>memset(&amp;cache,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(spiffs_cache));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>cache.cpage_count<sp/>=<sp/>cache_entries;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>cache.cpages<sp/>=<sp/>(u8_t<sp/>*)((u8_t<sp/>*)fs-&gt;cache<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(spiffs_cache));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>cache.cpage_use_map<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>cache.cpage_use_mask<sp/>=<sp/>cache_mask;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>_SPIFFS_MEMCPY(fs-&gt;cache,<sp/>&amp;cache,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(spiffs_cache));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>spiffs_cache<sp/>*c<sp/>=<sp/>spiffs_get_cache(fs);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>memset(c-&gt;cpages,<sp/>0,<sp/>c-&gt;cpage_count<sp/>*<sp/>SPIFFS_CACHE_PAGE_SIZE(fs));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>c-&gt;cpage_use_map<sp/>&amp;=<sp/>~(c-&gt;cpage_use_mask);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cache.cpage_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>spiffs_get_cache_page_hdr(fs,<sp/>c,<sp/>i)-&gt;ix<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>SPIFFS_CACHE</highlight></codeline>
    </programlisting>
    <location file="src/spiffs_cache.c"/>
  </compounddef>
</doxygen>
