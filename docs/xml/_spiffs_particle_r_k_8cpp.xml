<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_spiffs_particle_r_k_8cpp" kind="file" language="C++">
    <compoundname>SpiffsParticleRK.cpp</compoundname>
    <includes refid="_spiffs_particle_r_k_8h" local="yes">SpiffsParticleRK.h</includes>
    <incdepgraph>
      <node id="92">
        <label>SpiffsParticleRK.h</label>
        <link refid="_spiffs_particle_r_k_8h_source"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>spiffs.h</label>
        <link refid="spiffs_8h_source"/>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>src/SpiffsParticleRK.cpp</label>
        <link refid="_spiffs_particle_r_k_8cpp"/>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>spiffs_config.h</label>
        <link refid="spiffs__config_8h_source"/>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>stdlib.h</label>
      </node>
      <node id="99">
        <label>stddef.h</label>
      </node>
      <node id="98">
        <label>string.h</label>
      </node>
      <node id="101">
        <label>SpiFlashRK.h</label>
      </node>
      <node id="100">
        <label>unistd.h</label>
      </node>
      <node id="93">
        <label>Particle.h</label>
      </node>
      <node id="96">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_spiffs_particle_r_k_8cpp_1aba63318ed50a519b065d587efd0a33ba" prot="public" static="yes" mutable="no">
        <type>os_mutex_t</type>
        <definition>os_mutex_t _spiffsMutex</definition>
        <argsstring></argsstring>
        <name>_spiffsMutex</name>
        <initializer>= []() {
	os_mutex_t m;
	os_mutex_create(&amp;m);
	return m;
}()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.cpp" line="5" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_spiffs_particle_r_k_8cpp_1adaa6827c46ce9d9c507b2d9ba6e9a362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spiffsParticleInfoLog</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>spiffsParticleInfoLog</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.cpp" line="170" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="170" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="_spiffs_particle_r_k_8cpp_1a84ed87c4d78239638112cf681980cb47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spiffsParticleTraceLog</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>spiffsParticleTraceLog</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.cpp" line="178" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="178" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="_spiffs_particle_r_k_8cpp_1aa2e39f38388c1193331a456697a84882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spiffsParticleLock</definition>
        <argsstring>()</argsstring>
        <name>spiffsParticleLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.cpp" line="186" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="_spiffs_particle_r_k_8cpp_1ae77e1e3e10d00c77e42909f954d93ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spiffsParticleUnlock</definition>
        <argsstring>()</argsstring>
        <name>spiffsParticleUnlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.cpp" line="191" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="191" bodyend="193"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SpiffsParticleRK.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>os_mutex_t<sp/>_spiffsMutex<sp/>=<sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_t<sp/>m;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_create(&amp;m);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}();</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="class_spiffs_particle_1a3c3749f4cfae7c6ef1721b84e0964a56" kindref="member">SpiffsParticle::SpiffsParticle</ref>(SpiFlashBase<sp/>&amp;flash)<sp/>:<sp/>flash(flash)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>config.hal_read_f<sp/>=<sp/>readCallbackStatic;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>config.hal_write_f<sp/>=<sp/>writeCallbackStatic;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>config.hal_erase_f<sp/>=<sp/>eraseCallbackStatic;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>the<sp/>minimum<sp/>values<sp/>you<sp/>can<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>config.phys_erase_block<sp/>=<sp/>flash.getSectorSize();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>config.log_page_size<sp/>=<sp/>flash.getPageSize();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>config.phys_size<sp/>=<sp/>1024<sp/>*<sp/>1024;<sp/></highlight><highlight class="comment">//<sp/>Just<sp/>a<sp/>guess,<sp/>override<sp/>for<sp/>other<sp/>chips</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>config.phys_addr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>config.log_block_size<sp/>=<sp/>flash.getSectorSize();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>fs.user_data<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">SpiffsParticle::~SpiffsParticle()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">s32_t<sp/><ref refid="class_spiffs_particle_1a55ce37570d764bb8d00698903211fee8" kindref="member">SpiffsParticle::mount</ref>(spiffs_check_callback<sp/>callback)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(workBuffer<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workBuffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u8_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(2<sp/>*<sp/>config.log_page_size));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(workBuffer<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_ERR_OUT_OF_MEMORY;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fdBuffer<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdBufferSize<sp/>=<sp/>32<sp/>*<sp/>maxOpenFiles;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdBuffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u8_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(fdBufferSize));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fdBuffer<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_ERR_OUT_OF_MEMORY;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBuffer<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cacheBufferSize<sp/>=<sp/>(config.log_page_size<sp/>+<sp/>32)<sp/>*<sp/>cachePages<sp/>+<sp/>40;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cacheBuffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">u8_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(cacheBufferSize));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cacheBuffer<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_ERR_OUT_OF_MEMORY;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>userCheckCallback<sp/>=<sp/>callback;<sp/></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_mount(&amp;fs,<sp/>&amp;config,<sp/>workBuffer,<sp/>fdBuffer,<sp/>fdBufferSize,<sp/>cacheBuffer,<sp/>cacheBufferSize,<sp/>checkCallbackStatic);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_1a2f1b8abb2c89f1935675240430907f7e" kindref="member">SpiffsParticle::unmount</ref>()<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>SPIFFS_unmount(&amp;fs);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>free(workBuffer);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>workBuffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>free(fdBuffer);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>fdBuffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>free(cacheBuffer);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>cacheBuffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">s32_t<sp/><ref refid="class_spiffs_particle_1a377b6476c59d353cedc0c666a3998af4" kindref="member">SpiffsParticle::erase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_spiffs_particle_1a7dca116e5b60e5a46a10a15bdd747ca2" kindref="member">mounted</ref>())<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_ERR_MOUNTED;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>eraseCallback(config.phys_addr,<sp/>config.phys_size);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">s32_t<sp/>SpiffsParticle::readCallback(u32_t<sp/>addr,<sp/>u32_t<sp/>size,<sp/>u8_t<sp/>*dst)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>flash.readData(addr,<sp/>dst,<sp/>size);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lowLevelDebug)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log.trace(</highlight><highlight class="stringliteral">&quot;read<sp/>addr=0x%lx<sp/>size=%lu<sp/>data=%02x%02x&quot;</highlight><highlight class="normal">,<sp/>addr,<sp/>size,<sp/>dst[0],<sp/>dst[1]);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log.trace(</highlight><highlight class="stringliteral">&quot;read<sp/>addr=0x%lx<sp/>size=%lu&quot;</highlight><highlight class="normal">,<sp/>addr,<sp/>size);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">s32_t<sp/>SpiffsParticle::writeCallback(u32_t<sp/>addr,<sp/>u32_t<sp/>size,<sp/>u8_t<sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>flash.writeData(addr,<sp/>src,<sp/>size);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lowLevelDebug)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log.trace(</highlight><highlight class="stringliteral">&quot;write<sp/>addr=0x%lx<sp/>size=%lu<sp/>data=%02x%02x&quot;</highlight><highlight class="normal">,<sp/>addr,<sp/>size,<sp/>src[0],<sp/>src[1]);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log.trace(</highlight><highlight class="stringliteral">&quot;write<sp/>addr=0x%lx<sp/>size=%lu&quot;</highlight><highlight class="normal">,<sp/>addr,<sp/>size);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">s32_t<sp/>SpiffsParticle::eraseCallback(u32_t<sp/>addr,<sp/>u32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sectorSize<sp/>=<sp/>flash.getSectorSize();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(size<sp/>&gt;=<sp/>sectorSize)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lowLevelDebug)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log.trace(</highlight><highlight class="stringliteral">&quot;erase<sp/>sector<sp/>addr=0x%lx<sp/>size=%lu&quot;</highlight><highlight class="normal">,<sp/>addr,<sp/>sectorSize);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flash.sectorErase(addr);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr<sp/>+=<sp/>sectorSize;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>-=<sp/>sectorSize;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPIFFS_OK;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SpiffsParticle::checkCallback(spiffs_check_type<sp/>type,<sp/>spiffs_check_report<sp/>report,<sp/>u32_t<sp/>arg1,<sp/>u32_t<sp/>arg2)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(userCheckCallback)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>userCheckCallback(&amp;fs,<sp/>type,<sp/>report,<sp/>arg1,<sp/>arg2);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>operation<sp/>can<sp/>take<sp/>a<sp/>while,<sp/>so<sp/>make<sp/>sure<sp/>in<sp/>non-threaded<sp/>mode<sp/>the<sp/>cloud<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disconnect<sp/>by<sp/>calling<sp/>Particle.process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>Particle.process();</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[static]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">s32_t<sp/>SpiffsParticle::readCallbackStatic(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspiffs__t" kindref="compound">spiffs_t</ref><sp/>*fs,<sp/>u32_t<sp/>addr,<sp/>u32_t<sp/>size,<sp/>u8_t<sp/>*dst)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref><sp/>*This<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fs-&gt;user_data);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>This-&gt;readCallback(addr,<sp/>size,<sp/>dst);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[static]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">s32_t<sp/>SpiffsParticle::writeCallbackStatic(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspiffs__t" kindref="compound">spiffs_t</ref><sp/>*fs,<sp/>u32_t<sp/>addr,<sp/>u32_t<sp/>size,<sp/>u8_t<sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref><sp/>*This<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fs-&gt;user_data);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>This-&gt;writeCallback(addr,<sp/>size,<sp/>src);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[static]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">s32_t<sp/>SpiffsParticle::eraseCallbackStatic(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspiffs__t" kindref="compound">spiffs_t</ref><sp/>*fs,<sp/>u32_t<sp/>addr,<sp/>u32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref><sp/>*This<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fs-&gt;user_data);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>This-&gt;eraseCallback(addr,<sp/>size);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[static]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SpiffsParticle::checkCallbackStatic(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structspiffs__t" kindref="compound">spiffs_t</ref><sp/>*fs,<sp/>spiffs_check_type<sp/>type,<sp/>spiffs_check_report<sp/>report,<sp/>u32_t<sp/>arg1,<sp/>u32_t<sp/>arg2)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref><sp/>*This<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fs-&gt;user_data);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>This-&gt;checkCallback(type,<sp/>report,<sp/>arg1,<sp/>arg2);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spiffsParticleInfoLog(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf_v(LOG_LEVEL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;app.spiffs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spiffsParticleTraceLog(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>fmt);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>log_printf_v(LOG_LEVEL_TRACE,<sp/></highlight><highlight class="stringliteral">&quot;app.spiffs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spiffsParticleLock()<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_lock(_spiffsMutex);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spiffsParticleUnlock()<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>os_mutex_unlock(_spiffsMutex);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="class_spiffs_particle_file_1ae1d791cb24dd193cb76297f37c2902ac" kindref="member">SpiffsParticleFile::SpiffsParticleFile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="class_spiffs_particle_file_1ae1d791cb24dd193cb76297f37c2902ac" kindref="member">SpiffsParticleFile::SpiffsParticleFile</ref>(<ref refid="structspiffs__t" kindref="compound">spiffs_t</ref><sp/>*fs,<sp/>spiffs_file<sp/>fh)<sp/>:<sp/>fs(fs),<sp/>fh(fh)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="class_spiffs_particle_file_1a8d5ba5d2abd9082bc1dab48a2c5aa685" kindref="member">SpiffsParticleFile::~SpiffsParticleFile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="class_spiffs_particle_file_1ae1d791cb24dd193cb76297f37c2902ac" kindref="member">SpiffsParticleFile::SpiffsParticleFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file" kindref="compound">SpiffsParticleFile</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>=<sp/>other.fs;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>fh<sp/>=<sp/>other.fh;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="class_spiffs_particle_file" kindref="compound">SpiffsParticleFile</ref><sp/>&amp;<ref refid="class_spiffs_particle_file_1aa06d87b0322a764519c5d9726da7b090" kindref="member">SpiffsParticleFile::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file" kindref="compound">SpiffsParticleFile</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>fs<sp/>=<sp/>other.fs;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>fh<sp/>=<sp/>other.fh;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file_1a0f1c61016a86835e325bf231d90f9fbf" kindref="member">SpiffsParticleFile::available</ref>()<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspiffs__stat" kindref="compound">spiffs_stat</ref><sp/>stat;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>SPIFFS_fstat(fs,<sp/>fh,<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat.size<sp/>-<sp/>SPIFFS_tell(fs,<sp/>fh);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file_1a00ff81c014bb8373b3031e4b6ea48c16" kindref="member">SpiffsParticleFile::read</ref>()<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[1];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>SPIFFS_read(fs,<sp/>fh,<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf[0];</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file_1a2d6135f557d39fa6229aea72f8aab855" kindref="member">SpiffsParticleFile::peek</ref>()<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[1];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>SPIFFS_read(fs,<sp/>fh,<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>SPIFFS_lseek(fs,<sp/>fh,<sp/>-1,<sp/>SPIFFS_SEEK_CUR);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf[0];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file_1a25a803a411c55fe0ddf1c5d2576d8055" kindref="member">SpiffsParticleFile::flush</ref>()<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>SPIFFS_fflush(fs,<sp/>fh);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file_1a389c6c38e856bb76ac7c0194d7b63ff8" kindref="member">SpiffsParticleFile::readBytes</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>s32_t<sp/>res<sp/>=<sp/>SPIFFS_read(fs,<sp/>fh,<sp/>buffer,<sp/><ref refid="class_spiffs_particle_file_1ab8b0e24661334106f1eef15bd92bf2e2" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>res;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file_1a073ab7a5701a616959685c58a79e3391" kindref="member">SpiffsParticleFile::write</ref>(uint8_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>buf[1];</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file_1a073ab7a5701a616959685c58a79e3391" kindref="member">write</ref>(buf,<sp/>1);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_spiffs_particle_file_1a073ab7a5701a616959685c58a79e3391" kindref="member">SpiffsParticleFile::write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>s32_t<sp/>res<sp/>=<sp/>SPIFFS_write(fs,<sp/>fh,<sp/>const_cast&lt;void<sp/>*&gt;(reinterpret_cast&lt;const<sp/>void<sp/>*&gt;(buffer)),<sp/>size);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>res;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">s32_t<sp/><ref refid="class_spiffs_particle_file_1ab8b0e24661334106f1eef15bd92bf2e2" kindref="member">SpiffsParticleFile::length</ref>()<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspiffs__stat" kindref="compound">spiffs_stat</ref><sp/>stat;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>s32_t<sp/>res<sp/>=<sp/>SPIFFS_fstat(fs,<sp/>fh,<sp/>&amp;stat);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>SPIFFS_OK)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(s32_t)<sp/>stat.size;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/SpiffsParticleRK.cpp"/>
  </compounddef>
</doxygen>
