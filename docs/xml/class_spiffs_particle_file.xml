<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_spiffs_particle_file" kind="class" language="C++" prot="public">
    <compoundname>SpiffsParticleFile</compoundname>
    <basecompoundref refid="class_stream" prot="public" virt="non-virtual">Stream</basecompoundref>
    <includes refid="_spiffs_particle_r_k_8h" local="no">SpiffsParticleRK.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_spiffs_particle_file_1a6c2c168d668f901f794e483fef52c96e" prot="private" static="no" mutable="no">
        <type><ref refid="structspiffs__t" kindref="compound">spiffs_t</ref> *</type>
        <definition>spiffs_t* SpiffsParticleFile::fs</definition>
        <argsstring></argsstring>
        <name>fs</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="230" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spiffs_particle_file_1ad3b9f626a2ec8a629b574699d28c1c02" prot="private" static="no" mutable="no">
        <type>spiffs_file</type>
        <definition>spiffs_file SpiffsParticleFile::fh</definition>
        <argsstring></argsstring>
        <name>fh</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="231" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_spiffs_particle_file_1ae1d791cb24dd193cb76297f37c2902ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpiffsParticleFile::SpiffsParticleFile</definition>
        <argsstring>()</argsstring>
        <name>SpiffsParticleFile</name>
        <briefdescription>
<para>You normally don&apos;t need to instantiate one of these, you use the <computeroutput>openFile</computeroutput> method of <ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref> instead. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="33" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="196" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a632c82180b1235744301f5eb88168c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpiffsParticleFile::SpiffsParticleFile</definition>
        <argsstring>(spiffs_t *fs, spiffs_file fh)</argsstring>
        <name>SpiffsParticleFile</name>
        <param>
          <type><ref refid="structspiffs__t" kindref="compound">spiffs_t</ref> *</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>spiffs_file</type>
          <declname>fh</declname>
        </param>
        <briefdescription>
<para>You normally don&apos;t need to instantiate one of these, you use the <computeroutput>openFile</computeroutput> method of <ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref> instead. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="38" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a8d5ba5d2abd9082bc1dab48a2c5aa685" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>SpiffsParticleFile::~SpiffsParticleFile</definition>
        <argsstring>()</argsstring>
        <name>~SpiffsParticleFile</name>
        <briefdescription>
<para>Destructor. Note that this only destroys the container, the underlying file handle is still open and valid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="43" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1ab8d1c9d77137ae02336caad3ee4503af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpiffsParticleFile::SpiffsParticleFile</definition>
        <argsstring>(const SpiffsParticleFile &amp;other)</argsstring>
        <name>SpiffsParticleFile</name>
        <param>
          <type>const <ref refid="class_spiffs_particle_file" kindref="compound">SpiffsParticleFile</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>You normally don&apos;t need to instantiate one of these, you use the <computeroutput>openFile</computeroutput> method of <ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref> instead. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="48" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1aa06d87b0322a764519c5d9726da7b090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spiffs_particle_file" kindref="compound">SpiffsParticleFile</ref> &amp;</type>
        <definition>SpiffsParticleFile &amp; SpiffsParticleFile::operator=</definition>
        <argsstring>(const SpiffsParticleFile &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_spiffs_particle_file" kindref="compound">SpiffsParticleFile</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>You can copy this object, so it&apos;s safe to assign it to a local variable. </para>        </briefdescription>
        <detaileddescription>
<para>This object is only a container for the file handle; it doesn&apos;t do any reference counting and the file handle is only closed if you call the <ref refid="class_spiffs_particle_file_1a0dd9ea24f86d4639ed83e24101968298" kindref="member">close()</ref> method; deleting this object or letting it go out of scope doesn&apos;t close the file handle. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="57" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a0f1c61016a86835e325bf231d90f9fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int SpiffsParticleFile::available</definition>
        <argsstring>()</argsstring>
        <name>available</name>
        <reimplements refid="class_stream_1a9c98a763395005c08ce95afb2f06c7b1">available</reimplements>
        <briefdescription>
<para>Returns the number of bytes available to read from the current file position. </para>        </briefdescription>
        <detaileddescription>
<para>This is a standard Arduino/Wiring method for <ref refid="class_stream" kindref="compound">Stream</ref> objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="64" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="218" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a00ff81c014bb8373b3031e4b6ea48c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int SpiffsParticleFile::read</definition>
        <argsstring>()</argsstring>
        <name>read</name>
        <reimplements refid="class_stream_1aea5dee9fcb038148515b7c9212d38dc0">read</reimplements>
        <briefdescription>
<para>Read a single byte from the current file position and increment the file position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a byte value 0 - 255 or -1 if at the end of file.</para></simplesect>
This is a standard Arduino/Wiring method for <ref refid="class_stream" kindref="compound">Stream</ref> objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="73" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="227" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a2d6135f557d39fa6229aea72f8aab855" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int SpiffsParticleFile::peek</definition>
        <argsstring>()</argsstring>
        <name>peek</name>
        <reimplements refid="class_stream_1a30c3c212ec6ea67277a708c5ea2501a5">peek</reimplements>
        <briefdescription>
<para>Read a single byte from the current file position, but do not increment the file position. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a byte value 0 - 255 or -1 if at the end of file.</para></simplesect>
This is a standard Arduino/Wiring method for <ref refid="class_stream" kindref="compound">Stream</ref> objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="82" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="234" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a25a803a411c55fe0ddf1c5d2576d8055" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SpiffsParticleFile::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <reimplements refid="class_stream_1aa3ef2c34f152a0b2ea8de9139b9461da">flush</reimplements>
        <briefdescription>
<para>Write any buffered output. </para>        </briefdescription>
        <detaileddescription>
<para>It is not necessary to flush before close, as close will automatically flush any output if necessary.</para><para>This is a standard Arduino/Wiring method for <ref refid="class_stream" kindref="compound">Stream</ref> objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="91" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a389c6c38e856bb76ac7c0194d7b63ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SpiffsParticleFile::readBytes</definition>
        <argsstring>(char *buffer, size_t length)</argsstring>
        <name>readBytes</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Read a specified number of bytes from the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write to</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. It may read less than that.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, which will be 0 to length bytes.</para></simplesect>
This is a standard Arduino/Wiring method for <ref refid="class_stream" kindref="compound">Stream</ref> objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="104" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="247" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a073ab7a5701a616959685c58a79e3391" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SpiffsParticleFile::write</definition>
        <argsstring>(uint8_t c)</argsstring>
        <name>write</name>
        <reimplements refid="class_print_1a5be30d49adae2406a270c29ba9a3e0a3">write</reimplements>
        <param>
          <type>uint8_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Write a single byte to the current file position and increment the file position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte to write. Can write binary or text data.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a standard Arduino/Wiring method for <ref refid="class_stream" kindref="compound">Stream</ref> objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="113" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="255" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1ada3fa1782a929e32adab1c161f9d5eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t SpiffsParticleFile::write</definition>
        <argsstring>(const uint8_t *buffer, size_t size)</argsstring>
        <name>write</name>
        <reimplements refid="class_print_1a88864e109589a5be9b0f5ba1327f8421">write</reimplements>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write bytes to the current file position and increment the file position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write. Can write binary or text data.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to write.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written, typically this will be length.</para></simplesect>
This is a standard Arduino/Wiring method for <ref refid="class_stream" kindref="compound">Stream</ref> objects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="126" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a5aeceaf038f055a50376a500dfb27856" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>s32_t</type>
        <definition>s32_t SpiffsParticleFile::lseek</definition>
        <argsstring>(s32_t offs, int whence)</argsstring>
        <name>lseek</name>
        <param>
          <type>s32_t</type>
          <declname>offs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whence</declname>
        </param>
        <briefdescription>
<para>Adjust the file position for reading or writing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offs</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset, can be positive or negative</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>whence</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset relative to what:</para></parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>SPIFFS_SEEK_SET the beginning of the file</para></listitem><listitem><para>SPIFFS_SEEK_CUR the current file position</para></listitem><listitem><para>SPIFFS_SEEK_END the end of the file</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>SPIFFS_OK (0) on success, or a negative SPIFFS_ERR code.</para></simplesect>
This is a wrapper for the SPIFFS call, which emulates the Unix/POSIX API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="143" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1adc5b9b4d2447c8a3f1a63b40fd80e56f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SpiffsParticleFile::eof</definition>
        <argsstring>()</argsstring>
        <name>eof</name>
        <briefdescription>
<para>Returns true of the file position is currently at the end of the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if at end of file, false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="150" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1ac1cb4c1027e6e635aff6864efedd0faa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>s32_t</type>
        <definition>s32_t SpiffsParticleFile::tell</definition>
        <argsstring>()</argsstring>
        <name>tell</name>
        <briefdescription>
<para>Return the current file position from the start of the file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>file position (0 = at the start of the file) or a negative error code</para></simplesect>
This is a wrapper for the SPIFFS call, which emulates the Unix/POSIX API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="159" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1ab8b0e24661334106f1eef15bd92bf2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>s32_t</type>
        <definition>s32_t SpiffsParticleFile::length</definition>
        <argsstring>()</argsstring>
        <name>length</name>
        <briefdescription>
<para>Returns the length of the file in bytes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the length of the file in bytes or a negative error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="166" column="1" bodyfile="src/SpiffsParticleRK.cpp" bodystart="271" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a0a5b83d74718f890d0e449fb7c3bf818" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>s32_t</type>
        <definition>s32_t SpiffsParticleFile::remove</definition>
        <argsstring>()</argsstring>
        <name>remove</name>
        <briefdescription>
<para>Delete the currently open file. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the <ref refid="class_spiffs_particle" kindref="compound">SpiffsParticle</ref> class has a method to delete a file by filename, this method is provided if you already have the file open.</para><para><simplesect kind="return"><para>SPIFFS_OK (0) on success, or a negative SPIFFS_ERR code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="176" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1ae6d57777d56e7594d811c0e7e0e74eab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>s32_t</type>
        <definition>s32_t SpiffsParticleFile::truncate</definition>
        <argsstring>(s32_t len)</argsstring>
        <name>truncate</name>
        <param>
          <type>s32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Truncate the currently open file to the specified number of bytes. </para>        </briefdescription>
        <detaileddescription>
<para>Note that in POSIX, you can truncate a file to make it longer than the current file length but in SPIFFS you can only truncate a file to be equal to or less than the current file length.</para><para><simplesect kind="return"><para>SPIFFS_OK (0) on success, or a negative SPIFFS_ERR code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="186" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1abc5ffc192fa134728111aff8a2105592" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpiffsParticleFile::seekStart</definition>
        <argsstring>()</argsstring>
        <name>seekStart</name>
        <briefdescription>
<para>Convenience function to move the file position to the beginning of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="191" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a7bb1b4420d8a42cdc66db29d0a5bc1a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpiffsParticleFile::seekEnd</definition>
        <argsstring>()</argsstring>
        <name>seekEnd</name>
        <briefdescription>
<para>Convenience function to move the file position to the end of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="196" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1a0dd9ea24f86d4639ed83e24101968298" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SpiffsParticleFile::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
<para>Close this file. Make sure you close a file when done as there are a finite number of open file available. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="202" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1aa47bab32911760edd8477bcd54f1271d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SpiffsParticleFile::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <briefdescription>
<para>Returns true if this object appears to be valid. </para>        </briefdescription>
        <detaileddescription>
<para>This is mainly used when using the openFile method. Since this object is returned, you use the <ref refid="class_spiffs_particle_file_1aa47bab32911760edd8477bcd54f1271d" kindref="member">isValid()</ref> method to find out if the openFile succeeded. It might not if you try to open without create a file that does not exist, for example. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="211" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_spiffs_particle_file_1adc7aa6681c2f95cc2d59a54ef7dad2f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SpiffsParticleFile::operator spiffs_file</definition>
        <argsstring>()</argsstring>
        <name>operator spiffs_file</name>
        <briefdescription>
<para>Get the underlying SPIFFS file handle for this file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SpiffsParticleRK.h" line="216" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="216" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extension of Arduino/Wiring Stream/Print manipulating a single SPIFFS file. </para>    </briefdescription>
    <detaileddescription>
<para>SpiffsParticleRK - Particle wrapper for SPIFFS library</para><para>Port: <ulink url="https://github.com/rickkas7/SpiffsParticleRK">https://github.com/rickkas7/SpiffsParticleRK</ulink> Original: <ulink url="https://github.com/pellepl/spiffs/">https://github.com/pellepl/spiffs/</ulink></para><para>License: MIT You can use either this API, or the native SPIFFS API, which looks basically like the Unix file API. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="39">
        <label>Print</label>
        <link refid="class_print"/>
      </node>
      <node id="37">
        <label>SpiffsParticleFile</label>
        <link refid="class_spiffs_particle_file"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>Stream</label>
        <link refid="class_stream"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="42">
        <label>Print</label>
        <link refid="class_print"/>
      </node>
      <node id="40">
        <label>SpiffsParticleFile</label>
        <link refid="class_spiffs_particle_file"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>Stream</label>
        <link refid="class_stream"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/SpiffsParticleRK.h" line="28" column="1" bodyfile="src/SpiffsParticleRK.h" bodystart="28" bodyend="232"/>
    <listofallmembers>
      <member refid="class_spiffs_particle_file_1a0f1c61016a86835e325bf231d90f9fbf" prot="public" virt="virtual"><scope>SpiffsParticleFile</scope><name>available</name></member>
      <member refid="class_print_1aec9ecf84cc6d9087a650def3cefc459e" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>clearWriteError</name></member>
      <member refid="class_spiffs_particle_file_1a0dd9ea24f86d4639ed83e24101968298" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>close</name></member>
      <member refid="class_spiffs_particle_file_1adc5b9b4d2447c8a3f1a63b40fd80e56f" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>eof</name></member>
      <member refid="class_spiffs_particle_file_1ad3b9f626a2ec8a629b574699d28c1c02" prot="private" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>fh</name></member>
      <member refid="class_stream_1a4bab30ccd324efd461dee46a2339f673" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>find</name></member>
      <member refid="class_stream_1ad851401f2318cdb1de05707e021b81d9" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>find</name></member>
      <member refid="class_stream_1ad1f5f6600832396fb38a897baf4de35b" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>findUntil</name></member>
      <member refid="class_stream_1a3a9497de614792103ab8cb4759e01a69" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>findUntil</name></member>
      <member refid="class_spiffs_particle_file_1a25a803a411c55fe0ddf1c5d2576d8055" prot="public" virt="virtual"><scope>SpiffsParticleFile</scope><name>flush</name></member>
      <member refid="class_spiffs_particle_file_1a6c2c168d668f901f794e483fef52c96e" prot="private" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>fs</name></member>
      <member refid="class_print_1a88a4a829fb5d589efb43955ad0cbddcc" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>getWriteError</name></member>
      <member refid="class_spiffs_particle_file_1aa47bab32911760edd8477bcd54f1271d" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>isValid</name></member>
      <member refid="class_spiffs_particle_file_1ab8b0e24661334106f1eef15bd92bf2e2" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>length</name></member>
      <member refid="class_spiffs_particle_file_1a5aeceaf038f055a50376a500dfb27856" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>lseek</name></member>
      <member refid="class_spiffs_particle_file_1adc7aa6681c2f95cc2d59a54ef7dad2f9" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>operator spiffs_file</name></member>
      <member refid="class_spiffs_particle_file_1aa06d87b0322a764519c5d9726da7b090" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>operator=</name></member>
      <member refid="class_stream_1a5e5a0cc11eb586d89dcb7fa8e53a87e8" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>parseFloat</name></member>
      <member refid="class_stream_1a497ffcbcb4d5bb889a8fde487bcc1b98" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>parseInt</name></member>
      <member refid="class_spiffs_particle_file_1a2d6135f557d39fa6229aea72f8aab855" prot="public" virt="virtual"><scope>SpiffsParticleFile</scope><name>peek</name></member>
      <member refid="class_print_1acfe80773011eb17dfb52c2fba517a093" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1a1e411d07a8ffec5faf7ce485bac0f029" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1ae35481e77567618140cd58d8b96d3747" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1aa28ddbde83b14df73b41c919ecc4478f" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1afcd7d3a184df961a502643e4fb638c52" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1a0c663ac015ebc037ea044ba2e2cf2947" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1acb8c6dcd4339b024436002aa9a6f4be2" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1ad89472bdb6539423a42d350beec02ff4" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1a901b0f06ae34aab31b8fbb4298f0596e" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>print</name></member>
      <member refid="class_print_1a08a461c9fee5fd8f5795d6e9f61e3d5b" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>printf</name></member>
      <member refid="class_print_1ad337ce3f7977411b7d34d47a51e5737e" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1a80fdd92db4b396062586bcb3e08d3835" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1a000b3fd5b723cb6c7db0d3231a9ef2f8" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1a82aa91bbd859f28a0a3b4869e5bfcadd" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1a2608232c1f10f654111ff447de16d60b" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1a82bbe59b28440c29e55ff3597eb45376" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1afa936d7e8dd329d9162f2cd28f42681e" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1a178b90baf9f74f0945f5c64aafec59ea" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1a20f9e104153b62e720c9b4c348b44f00" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1a169b128f9e22f0c15883768f580541a2" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>println</name></member>
      <member refid="class_print_1afa41aa5211c54b7b4d79b9286880c337" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>printlnf</name></member>
      <member refid="class_spiffs_particle_file_1a00ff81c014bb8373b3031e4b6ea48c16" prot="public" virt="virtual"><scope>SpiffsParticleFile</scope><name>read</name></member>
      <member refid="class_spiffs_particle_file_1a389c6c38e856bb76ac7c0194d7b63ff8" prot="public" virt="virtual"><scope>SpiffsParticleFile</scope><name>readBytes</name></member>
      <member refid="class_stream_1af84672a4fb2620466958d3118d4fea00" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>readBytesUntil</name></member>
      <member refid="class_stream_1a1c60bdda2b65d78e5a1362d51b856c5a" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>readString</name></member>
      <member refid="class_stream_1a6a409da87c552909260d8cc428c5ca70" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>readStringUntil</name></member>
      <member refid="class_spiffs_particle_file_1a0a5b83d74718f890d0e449fb7c3bf818" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>remove</name></member>
      <member refid="class_spiffs_particle_file_1a7bb1b4420d8a42cdc66db29d0a5bc1a8" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>seekEnd</name></member>
      <member refid="class_spiffs_particle_file_1abc5ffc192fa134728111aff8a2105592" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>seekStart</name></member>
      <member refid="class_stream_1abaa50647d6dbb3baf7697a2691a06177" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>setTimeout</name></member>
      <member refid="class_spiffs_particle_file_1ae1d791cb24dd193cb76297f37c2902ac" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>SpiffsParticleFile</name></member>
      <member refid="class_spiffs_particle_file_1a632c82180b1235744301f5eb88168c5b" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>SpiffsParticleFile</name></member>
      <member refid="class_spiffs_particle_file_1ab8d1c9d77137ae02336caad3ee4503af" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>SpiffsParticleFile</name></member>
      <member refid="class_spiffs_particle_file_1ac1cb4c1027e6e635aff6864efedd0faa" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>tell</name></member>
      <member refid="class_spiffs_particle_file_1ae6d57777d56e7594d811c0e7e0e74eab" prot="public" virt="non-virtual"><scope>SpiffsParticleFile</scope><name>truncate</name></member>
      <member refid="class_spiffs_particle_file_1a073ab7a5701a616959685c58a79e3391" prot="public" virt="virtual"><scope>SpiffsParticleFile</scope><name>write</name></member>
      <member refid="class_spiffs_particle_file_1ada3fa1782a929e32adab1c161f9d5eeb" prot="public" virt="virtual"><scope>SpiffsParticleFile</scope><name>write</name></member>
      <member refid="class_print_1a5b40e0e9cab1f2fe5bb0cb22ffe5adda" prot="public" virt="non-virtual" ambiguityscope="Stream::"><scope>SpiffsParticleFile</scope><name>write</name></member>
      <member refid="class_spiffs_particle_file_1a8d5ba5d2abd9082bc1dab48a2c5aa685" prot="public" virt="virtual"><scope>SpiffsParticleFile</scope><name>~SpiffsParticleFile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
